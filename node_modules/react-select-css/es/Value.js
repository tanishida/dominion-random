import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import classNames from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';

var Value =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Value, _React$Component);

  function Value(props) {
    var _this;

    _classCallCheck(this, Value);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Value).call(this, props));
    _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_this));
    _this.onRemove = _this.onRemove.bind(_assertThisInitialized(_this));
    _this.handleTouchEndRemove = _this.handleTouchEndRemove.bind(_assertThisInitialized(_this));
    _this.handleTouchMove = _this.handleTouchMove.bind(_assertThisInitialized(_this));
    _this.handleTouchStart = _this.handleTouchStart.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Value, [{
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      if (event.type === 'mousedown' && event.button !== 0) {
        return;
      }

      if (this.props.onClick) {
        event.stopPropagation();
        this.props.onClick(this.props.value, event);
        return;
      }

      if (this.props.value.href) {
        event.stopPropagation();
      }
    }
  }, {
    key: "onRemove",
    value: function onRemove(event) {
      event.preventDefault();
      event.stopPropagation();
      this.props.onRemove(this.props.value);
    }
  }, {
    key: "handleTouchEndRemove",
    value: function handleTouchEndRemove(event) {
      // Check if the view is being dragged, In this case
      // we don't want to fire the click event (because the user only wants to scroll)
      if (this.dragging) return; // Fire the mouse events

      this.onRemove(event);
    }
  }, {
    key: "handleTouchMove",
    value: function handleTouchMove() {
      // Set a flag that the view is being dragged
      this.dragging = true;
    }
  }, {
    key: "handleTouchStart",
    value: function handleTouchStart() {
      // Set a flag that the view is not being dragged
      this.dragging = false;
    }
  }, {
    key: "renderRemoveIcon",
    value: function renderRemoveIcon() {
      if (this.props.disabled || !this.props.onRemove) return;
      return React.createElement("span", {
        className: "Select-value-icon",
        "aria-hidden": "true",
        onMouseDown: this.onRemove,
        onTouchEnd: this.handleTouchEndRemove,
        onTouchStart: this.handleTouchStart,
        onTouchMove: this.handleTouchMove
      }, "\xD7");
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      var className = 'Select-value-label';
      return this.props.onClick || this.props.value.href ? React.createElement("a", {
        className: className,
        href: this.props.value.href,
        target: this.props.value.target,
        onMouseDown: this.handleMouseDown,
        onTouchEnd: this.handleMouseDown
      }, this.props.children) : React.createElement("span", {
        className: className,
        role: "option",
        "aria-selected": "true",
        id: this.props.id
      }, this.props.children);
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        className: classNames('Select-value', this.props.value.disabled ? 'Select-value-disabled' : '', this.props.value.className),
        style: this.props.value.style,
        title: this.props.value.title
      }, this.renderRemoveIcon(), this.renderLabel());
    }
  }]);

  return Value;
}(React.Component);

Value.propTypes = {
  children: PropTypes.node,
  disabled: PropTypes.bool,
  // disabled prop passed to ReactSelect
  id: PropTypes.string,
  // Unique id for the value - used for aria
  onClick: PropTypes.func,
  // method to handle click on value label
  onRemove: PropTypes.func,
  // method to handle removal of the value
  value: PropTypes.object.isRequired // the option object for this value

};
export default Value;