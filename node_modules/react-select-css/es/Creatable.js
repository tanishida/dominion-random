import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import defaultFilterOptions from './utils/defaultFilterOptions';
import defaultMenuRenderer from './utils/defaultMenuRenderer';
import Select from './Select';

var CreatableSelect =
/*#__PURE__*/
function (_React$Component) {
  _inherits(CreatableSelect, _React$Component);

  function CreatableSelect(props, context) {
    var _this;

    _classCallCheck(this, CreatableSelect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreatableSelect).call(this, props, context));
    _this.filterOptions = _this.filterOptions.bind(_assertThisInitialized(_this));
    _this.menuRenderer = _this.menuRenderer.bind(_assertThisInitialized(_this));
    _this.onInputKeyDown = _this.onInputKeyDown.bind(_assertThisInitialized(_this));
    _this.onInputChange = _this.onInputChange.bind(_assertThisInitialized(_this));
    _this.onOptionSelect = _this.onOptionSelect.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(CreatableSelect, [{
    key: "createNewOption",
    value: function createNewOption() {
      var _this$props = this.props,
          isValidNewOption = _this$props.isValidNewOption,
          newOptionCreator = _this$props.newOptionCreator,
          onNewOptionClick = _this$props.onNewOptionClick,
          _this$props$options = _this$props.options,
          options = _this$props$options === void 0 ? [] : _this$props$options;

      if (isValidNewOption({
        label: this.inputValue
      })) {
        var option = newOptionCreator({
          label: this.inputValue,
          labelKey: this.labelKey,
          valueKey: this.valueKey
        });

        var _isOptionUnique = this.isOptionUnique({
          option: option,
          options: options
        }); // Don't add the same option twice.


        if (_isOptionUnique) {
          if (onNewOptionClick) {
            onNewOptionClick(option);
          } else {
            options.unshift(option);
            this.select.selectValue(option);
          }
        }
      }
    }
  }, {
    key: "filterOptions",
    value: function filterOptions() {
      var _this$props2 = this.props,
          filterOptions = _this$props2.filterOptions,
          isValidNewOption = _this$props2.isValidNewOption,
          promptTextCreator = _this$props2.promptTextCreator,
          showNewOptionAtTop = _this$props2.showNewOptionAtTop; // TRICKY Check currently selected options as well.
      // Don't display a create-prompt for a value that's selected.
      // This covers async edge-cases where a newly-created Option isn't yet in the async-loaded array.

      var excludeOptions = (arguments.length <= 2 ? undefined : arguments[2]) || [];
      var filteredOptions = filterOptions.apply(void 0, arguments) || [];

      if (isValidNewOption({
        label: this.inputValue
      })) {
        var _newOptionCreator = this.props.newOptionCreator;

        var option = _newOptionCreator({
          label: this.inputValue,
          labelKey: this.labelKey,
          valueKey: this.valueKey
        }); // TRICKY Compare to all options (not just filtered options) in case option has already been selected).
        // For multi-selects, this would remove it from the filtered list.


        var _isOptionUnique2 = this.isOptionUnique({
          option: option,
          options: excludeOptions.concat(filteredOptions)
        });

        if (_isOptionUnique2) {
          var prompt = promptTextCreator(this.inputValue);
          this._createPlaceholderOption = _newOptionCreator({
            label: prompt,
            labelKey: this.labelKey,
            valueKey: this.valueKey
          });

          if (showNewOptionAtTop) {
            filteredOptions.unshift(this._createPlaceholderOption);
          } else {
            filteredOptions.push(this._createPlaceholderOption);
          }
        }
      }

      return filteredOptions;
    }
  }, {
    key: "isOptionUnique",
    value: function isOptionUnique(_ref) {
      var option = _ref.option,
          options = _ref.options;
      var isOptionUnique = this.props.isOptionUnique;
      options = options || this.props.options;
      return isOptionUnique({
        labelKey: this.labelKey,
        option: option,
        options: options,
        valueKey: this.valueKey
      });
    }
  }, {
    key: "menuRenderer",
    value: function menuRenderer(params) {
      var menuRenderer = this.props.menuRenderer;
      return menuRenderer(_objectSpread({}, params, {
        onSelect: this.onOptionSelect,
        selectValue: this.onOptionSelect
      }));
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(input) {
      var onInputChange = this.props.onInputChange; // This value may be needed in between Select mounts (when this.select is null)

      this.inputValue = input;

      if (onInputChange) {
        this.inputValue = onInputChange(input);
      }

      return this.inputValue;
    }
  }, {
    key: "onInputKeyDown",
    value: function onInputKeyDown(event) {
      var _this$props3 = this.props,
          shouldKeyDownEventCreateNewOption = _this$props3.shouldKeyDownEventCreateNewOption,
          onInputKeyDown = _this$props3.onInputKeyDown;
      var focusedOption = this.select.getFocusedOption();

      if (focusedOption && focusedOption === this._createPlaceholderOption && shouldKeyDownEventCreateNewOption(event)) {
        this.createNewOption(); // Prevent decorated Select from doing anything additional with this keyDown event

        event.preventDefault();
      } else if (onInputKeyDown) {
        onInputKeyDown(event);
      }
    }
  }, {
    key: "onOptionSelect",
    value: function onOptionSelect(option) {
      if (option === this._createPlaceholderOption) {
        this.createNewOption();
      } else {
        this.select.selectValue(option);
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.select.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props4 = this.props,
          refProp = _this$props4.ref,
          restProps = _objectWithoutProperties(_this$props4, ["ref"]);

      var children = this.props.children; // We can't use destructuring default values to set the children,
      // because it won't apply work if `children` is null. A falsy check is
      // more reliable in real world use-cases.

      if (!children) {
        children = defaultChildren;
      }

      var props = _objectSpread({}, restProps, {
        allowCreate: true,
        filterOptions: this.filterOptions,
        menuRenderer: this.menuRenderer,
        onInputChange: this.onInputChange,
        onInputKeyDown: this.onInputKeyDown,
        ref: function ref(_ref2) {
          _this2.select = _ref2; // These values may be needed in between Select mounts (when this.select is null)

          if (_ref2) {
            _this2.labelKey = _ref2.props.labelKey;
            _this2.valueKey = _ref2.props.valueKey;
          }

          if (refProp) {
            refProp(_ref2);
          }
        }
      });

      return children(props);
    }
  }]);

  return CreatableSelect;
}(React.Component);

var defaultChildren = function defaultChildren(props) {
  return React.createElement(Select, props);
};

var isOptionUnique = function isOptionUnique(_ref3) {
  var option = _ref3.option,
      options = _ref3.options,
      labelKey = _ref3.labelKey,
      valueKey = _ref3.valueKey;

  if (!options || !options.length) {
    return true;
  }

  return options.filter(function (existingOption) {
    return existingOption[labelKey] === option[labelKey] || existingOption[valueKey] === option[valueKey];
  }).length === 0;
};

var isValidNewOption = function isValidNewOption(_ref4) {
  var label = _ref4.label;
  return !!label;
};

var newOptionCreator = function newOptionCreator(_ref5) {
  var label = _ref5.label,
      labelKey = _ref5.labelKey,
      valueKey = _ref5.valueKey;
  var option = {};
  option[valueKey] = label;
  option[labelKey] = label;
  option.className = 'Select-create-option-placeholder';
  return option;
};

var promptTextCreator = function promptTextCreator(label) {
  return "Create option \"".concat(label, "\"");
};

var shouldKeyDownEventCreateNewOption = function shouldKeyDownEventCreateNewOption(_ref6) {
  var keyCode = _ref6.keyCode;

  switch (keyCode) {
    case 9: // TAB

    case 13: // ENTER

    case 188:
      // COMMA
      return true;

    default:
      return false;
  }
}; // Default prop methods


CreatableSelect.isOptionUnique = isOptionUnique;
CreatableSelect.isValidNewOption = isValidNewOption;
CreatableSelect.newOptionCreator = newOptionCreator;
CreatableSelect.promptTextCreator = promptTextCreator;
CreatableSelect.shouldKeyDownEventCreateNewOption = shouldKeyDownEventCreateNewOption;
CreatableSelect.defaultProps = {
  filterOptions: defaultFilterOptions,
  isOptionUnique: isOptionUnique,
  isValidNewOption: isValidNewOption,
  menuRenderer: defaultMenuRenderer,
  newOptionCreator: newOptionCreator,
  promptTextCreator: promptTextCreator,
  shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption,
  showNewOptionAtTop: true
};
CreatableSelect.propTypes = {
  // Child function responsible for creating the inner Select component
  // This component can be used to compose HOCs (eg Creatable and Async)
  // (props: Object): PropTypes.element
  children: PropTypes.func,
  // See Select.propTypes.filterOptions
  filterOptions: PropTypes.any,
  // Searches for any matching option within the set of options.
  // This function prevents duplicate options from being created.
  // ({ option: Object, options: Array, labelKey: string, valueKey: string }): boolean
  isOptionUnique: PropTypes.func,
  // Determines if the current input text represents a valid option.
  // ({ label: string }): boolean
  isValidNewOption: PropTypes.func,
  // See Select.propTypes.menuRenderer
  menuRenderer: PropTypes.any,
  // Factory to create new option.
  // ({ label: string, labelKey: string, valueKey: string }): Object
  newOptionCreator: PropTypes.func,
  // input change handler: function (inputValue) {}
  onInputChange: PropTypes.func,
  // input keyDown handler: function (event) {}
  onInputKeyDown: PropTypes.func,
  // new option click handler: function (option) {}
  onNewOptionClick: PropTypes.func,
  // See Select.propTypes.options
  options: PropTypes.array,
  // Creates prompt/placeholder option text.
  // (filterText: string): string
  promptTextCreator: PropTypes.func,
  ref: PropTypes.func,
  // Decides if a keyDown event (eg its `keyCode`) should result in the creation of a new option.
  shouldKeyDownEventCreateNewOption: PropTypes.func,
  // Where to show prompt/placeholder option text.
  // true: new option prompt at top of list (default)
  // false: new option prompt at bottom of list
  showNewOptionAtTop: PropTypes.bool
};
export default CreatableSelect;