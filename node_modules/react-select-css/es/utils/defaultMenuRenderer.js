import classNames from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';

var menuRenderer = function menuRenderer(_ref) {
  var focusedOption = _ref.focusedOption,
      focusOption = _ref.focusOption,
      inputValue = _ref.inputValue,
      instancePrefix = _ref.instancePrefix,
      onFocus = _ref.onFocus,
      onOptionRef = _ref.onOptionRef,
      onSelect = _ref.onSelect,
      optionClassName = _ref.optionClassName,
      optionComponent = _ref.optionComponent,
      optionRenderer = _ref.optionRenderer,
      options = _ref.options,
      removeValue = _ref.removeValue,
      selectValue = _ref.selectValue,
      valueArray = _ref.valueArray,
      valueKey = _ref.valueKey;
  var Option = optionComponent;
  return options.map(function (option, i) {
    var isSelected = valueArray && valueArray.some(function (x) {
      return x[valueKey] === option[valueKey];
    });
    var isFocused = option === focusedOption;
    var optionClass = classNames(optionClassName, {
      'Select-option': true,
      'is-selected': isSelected,
      'is-focused': isFocused,
      'is-disabled': option.disabled
    });
    return React.createElement(Option, {
      className: optionClass,
      focusOption: focusOption,
      inputValue: inputValue,
      instancePrefix: instancePrefix,
      isDisabled: option.disabled,
      isFocused: isFocused,
      isSelected: isSelected,
      key: "option-".concat(i, "-").concat(option[valueKey]),
      onFocus: onFocus,
      onSelect: onSelect,
      option: option,
      optionIndex: i,
      ref: function ref(_ref2) {
        onOptionRef(_ref2, isFocused);
      },
      removeValue: removeValue,
      selectValue: selectValue
    }, optionRenderer(option, i, inputValue));
  });
};

menuRenderer.propTypes = {
  focusOption: PropTypes.func,
  focusedOption: PropTypes.object,
  inputValue: PropTypes.string,
  instancePrefix: PropTypes.string,
  onFocus: PropTypes.func,
  onOptionRef: PropTypes.func,
  onSelect: PropTypes.func,
  optionClassName: PropTypes.string,
  optionComponent: PropTypes.func,
  optionRenderer: PropTypes.func,
  options: PropTypes.array,
  removeValue: PropTypes.func,
  selectValue: PropTypes.func,
  valueArray: PropTypes.array,
  valueKey: PropTypes.string
};
export default menuRenderer;