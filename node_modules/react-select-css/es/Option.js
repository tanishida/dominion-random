import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import classNames from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import blockEvent from './utils/blockEvent';

var Option =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Option, _React$Component);

  function Option(props) {
    var _this;

    _classCallCheck(this, Option);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Option).call(this, props));
    _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_this));
    _this.handleMouseEnter = _this.handleMouseEnter.bind(_assertThisInitialized(_this));
    _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_this));
    _this.handleTouchStart = _this.handleTouchStart.bind(_assertThisInitialized(_this));
    _this.handleTouchEnd = _this.handleTouchEnd.bind(_assertThisInitialized(_this));
    _this.handleTouchMove = _this.handleTouchMove.bind(_assertThisInitialized(_this));
    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Option, [{
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      event.preventDefault();
      event.stopPropagation();
      this.props.onSelect(this.props.option, event);
    }
  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter(event) {
      this.onFocus(event);
    }
  }, {
    key: "handleMouseMove",
    value: function handleMouseMove(event) {
      this.onFocus(event);
    }
  }, {
    key: "handleTouchEnd",
    value: function handleTouchEnd(event) {
      // Check if the view is being dragged, In this case
      // we don't want to fire the click event (because the user only wants to scroll)
      if (this.dragging) return;
      this.handleMouseDown(event);
    }
  }, {
    key: "handleTouchMove",
    value: function handleTouchMove() {
      // Set a flag that the view is being dragged
      this.dragging = true;
    }
  }, {
    key: "handleTouchStart",
    value: function handleTouchStart() {
      // Set a flag that the view is not being dragged
      this.dragging = false;
    }
  }, {
    key: "onFocus",
    value: function onFocus(event) {
      if (!this.props.isFocused) {
        this.props.onFocus(this.props.option, event);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          option = _this$props.option,
          instancePrefix = _this$props.instancePrefix,
          optionIndex = _this$props.optionIndex;
      var className = classNames(this.props.className, option.className);
      return option.disabled ? React.createElement("div", {
        className: className,
        onMouseDown: blockEvent,
        onClick: blockEvent
      }, this.props.children) : React.createElement("div", {
        className: className,
        style: option.style,
        role: "option",
        "aria-label": option.label,
        onMouseDown: this.handleMouseDown,
        onMouseEnter: this.handleMouseEnter,
        onMouseMove: this.handleMouseMove,
        onTouchStart: this.handleTouchStart,
        onTouchMove: this.handleTouchMove,
        onTouchEnd: this.handleTouchEnd,
        id: "".concat(instancePrefix, "-option-").concat(optionIndex),
        title: option.title
      }, this.props.children);
    }
  }]);

  return Option;
}(React.Component);

Option.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  // className (based on mouse position)
  instancePrefix: PropTypes.string.isRequired,
  // unique prefix for the ids (used for aria)
  isDisabled: PropTypes.bool,
  // the option is disabled
  isFocused: PropTypes.bool,
  // the option is focused
  isSelected: PropTypes.bool,
  // the option is selected
  onFocus: PropTypes.func,
  // method to handle mouseEnter on option element
  onSelect: PropTypes.func,
  // method to handle click on option element
  onUnfocus: PropTypes.func,
  // method to handle mouseLeave on option element
  option: PropTypes.object.isRequired,
  // object that is base for that option
  optionIndex: PropTypes.number // index of the option, used to generate unique ids for aria

};
export default Option;