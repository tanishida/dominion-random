"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Select = _interopRequireDefault(require("./Select"));

var _stripDiacritics = _interopRequireDefault(require("./utils/stripDiacritics"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var propTypes = {
  autoload: _propTypes.default.bool.isRequired,
  // automatically call the `loadOptions` prop on-mount; defaults to true
  cache: _propTypes.default.any,
  // object to use to cache results; set to null/false to disable caching
  children: _propTypes.default.func.isRequired,
  // Child function responsible for creating the inner Select component; (props: Object): PropTypes.element
  ignoreAccents: _propTypes.default.bool,
  // strip diacritics when filtering; defaults to true
  ignoreCase: _propTypes.default.bool,
  // perform case-insensitive filtering; defaults to true
  loadOptions: _propTypes.default.func.isRequired,
  // callback to load options asynchronously; (inputValue: string, callback: Function): ?Promise
  loadingPlaceholder: _propTypes.default.oneOfType([// replaces the placeholder while options are loading
  _propTypes.default.string, _propTypes.default.node]),
  multi: _propTypes.default.bool,
  // multi-value input
  noResultsText: _propTypes.default.oneOfType([// field noResultsText, displayed when no options come back from the server
  _propTypes.default.string, _propTypes.default.node]),
  onChange: _propTypes.default.func,
  // onChange handler: function (newValue) {}
  onInputChange: _propTypes.default.func,
  // optional for keeping track of what is being typed
  options: _propTypes.default.array.isRequired,
  // array of options
  placeholder: _propTypes.default.oneOfType([// field placeholder, displayed when there's no value (shared with Select)
  _propTypes.default.string, _propTypes.default.node]),
  searchPromptText: _propTypes.default.oneOfType([// label to prompt for search input
  _propTypes.default.string, _propTypes.default.node]),
  value: _propTypes.default.any // initial field value

};
var defaultCache = {};

var defaultChildren = function defaultChildren(props) {
  return _react.default.createElement(_Select.default, props);
};

var defaultProps = {
  autoload: true,
  cache: defaultCache,
  children: defaultChildren,
  ignoreAccents: true,
  ignoreCase: true,
  loadingPlaceholder: 'Loading...',
  options: [],
  searchPromptText: 'Type to search'
};

var Async =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Async, _Component);

  function Async(props, context) {
    var _this;

    (0, _classCallCheck2.default)(this, Async);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Async).call(this, props, context));
    _this._cache = props.cache === defaultCache ? {} : props.cache;
    _this.state = {
      inputValue: '',
      isLoading: false,
      options: props.options,
      oldOptions: props.options
    };
    _this.onInputChange = _this.onInputChange.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(Async, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var autoload = this.props.autoload;

      if (autoload) {
        this.loadOptions('');
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._callback = null;
    }
  }, {
    key: "loadOptions",
    value: function loadOptions(inputValue) {
      var _this2 = this;

      var loadOptions = this.props.loadOptions;
      var cache = this._cache;

      if (cache && Object.prototype.hasOwnProperty.call(cache, inputValue)) {
        this._callback = null;
        this.setState({
          isLoading: false,
          options: cache[inputValue]
        });
        return;
      }

      var callback = function callback(error, data) {
        var options = data && data.options || [];

        if (cache) {
          cache[inputValue] = options;
        }

        if (callback === _this2._callback) {
          _this2._callback = null;

          _this2.setState({
            isLoading: false,
            options: options
          });
        }
      }; // Ignore all but the most recent request


      this._callback = callback;
      var promise = loadOptions(inputValue, callback);

      if (promise) {
        promise.then(function (data) {
          return callback(null, data);
        }, function (error) {
          return callback(error);
        });
      }

      if (this._callback && !this.state.isLoading) {
        this.setState({
          isLoading: true
        });
      }
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(inputValue) {
      var _this$props = this.props,
          ignoreAccents = _this$props.ignoreAccents,
          ignoreCase = _this$props.ignoreCase,
          onInputChange = _this$props.onInputChange;
      var newInputValue = inputValue;

      if (onInputChange) {
        var value = onInputChange(newInputValue); // Note: != used deliberately here to catch undefined and null

        if (value != null && (0, _typeof2.default)(value) !== 'object') {
          newInputValue = '' + value;
        }
      }

      var transformedInputValue = newInputValue;

      if (ignoreAccents) {
        transformedInputValue = (0, _stripDiacritics.default)(transformedInputValue);
      }

      if (ignoreCase) {
        transformedInputValue = transformedInputValue.toLowerCase();
      }

      this.setState({
        inputValue: newInputValue
      });
      this.loadOptions(transformedInputValue); // Return new input value, but without applying toLowerCase() to avoid modifying the user's view case of the input while typing.

      return newInputValue;
    }
  }, {
    key: "noResultsText",
    value: function noResultsText() {
      var _this$props2 = this.props,
          loadingPlaceholder = _this$props2.loadingPlaceholder,
          noResultsText = _this$props2.noResultsText,
          searchPromptText = _this$props2.searchPromptText;
      var _this$state = this.state,
          inputValue = _this$state.inputValue,
          isLoading = _this$state.isLoading;

      if (isLoading) {
        return loadingPlaceholder;
      }

      if (inputValue && noResultsText) {
        return noResultsText;
      }

      return searchPromptText;
    }
  }, {
    key: "focus",
    value: function focus() {
      this.select.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props3 = this.props,
          children = _this$props3.children,
          loadingPlaceholder = _this$props3.loadingPlaceholder,
          placeholder = _this$props3.placeholder;
      var _this$state2 = this.state,
          isLoading = _this$state2.isLoading,
          options = _this$state2.options;
      var props = {
        noResultsText: this.noResultsText(),
        placeholder: isLoading ? loadingPlaceholder : placeholder,
        options: isLoading && loadingPlaceholder ? [] : options,
        ref: function ref(_ref) {
          return _this3.select = _ref;
        }
      };
      return children(_objectSpread({}, this.props, {}, props, {
        isLoading: isLoading,
        onInputChange: this.onInputChange
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.options !== prevState.oldOptions) {
        return {
          options: nextProps.options,
          oldOptions: nextProps.options
        };
      } else {
        return null;
      }
    }
  }]);
  return Async;
}(_react.Component);

exports.default = Async;
Async.propTypes = propTypes;
Async.defaultProps = defaultProps;