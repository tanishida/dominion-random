"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _stripDiacritics = _interopRequireDefault(require("./stripDiacritics"));

var _trim = _interopRequireDefault(require("./trim"));

var isValid = function isValid(value) {
  return typeof value !== 'undefined' && value !== null && value !== '';
};

var filterOptions = function filterOptions(options, filterValue, excludeOptions, props) {
  if (props.ignoreAccents) {
    filterValue = (0, _stripDiacritics.default)(filterValue);
  }

  if (props.ignoreCase) {
    filterValue = filterValue.toLowerCase();
  }

  if (props.trimFilter) {
    filterValue = (0, _trim.default)(filterValue);
  }

  if (excludeOptions) excludeOptions = excludeOptions.map(function (i) {
    return i[props.valueKey];
  });
  return options.filter(function (option) {
    if (excludeOptions && excludeOptions.indexOf(option[props.valueKey]) > -1) return false;
    if (props.filterOption) return props.filterOption.call(undefined, option, filterValue);
    if (!filterValue) return true;
    var value = option[props.valueKey];
    var label = option[props.labelKey];
    var hasValue = isValid(value);
    var hasLabel = isValid(label);

    if (!hasValue && !hasLabel) {
      return false;
    }

    var valueTest = hasValue ? String(value) : null;
    var labelTest = hasLabel ? String(label) : null;

    if (props.ignoreAccents) {
      if (valueTest && props.matchProp !== 'label') valueTest = (0, _stripDiacritics.default)(valueTest);
      if (labelTest && props.matchProp !== 'value') labelTest = (0, _stripDiacritics.default)(labelTest);
    }

    if (props.ignoreCase) {
      if (valueTest && props.matchProp !== 'label') valueTest = valueTest.toLowerCase();
      if (labelTest && props.matchProp !== 'value') labelTest = labelTest.toLowerCase();
    }

    return props.matchPos === 'start' ? valueTest && props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || labelTest && props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : valueTest && props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || labelTest && props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;
  });
};

var _default = filterOptions;
exports.default = _default;