"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _blockEvent = _interopRequireDefault(require("./utils/blockEvent"));

var Option =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Option, _React$Component);

  function Option(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Option);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Option).call(this, props));
    _this.handleMouseDown = _this.handleMouseDown.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMouseEnter = _this.handleMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMouseMove = _this.handleMouseMove.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTouchStart = _this.handleTouchStart.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTouchEnd = _this.handleTouchEnd.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTouchMove = _this.handleTouchMove.bind((0, _assertThisInitialized2.default)(_this));
    _this.onFocus = _this.onFocus.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(Option, [{
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      event.preventDefault();
      event.stopPropagation();
      this.props.onSelect(this.props.option, event);
    }
  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter(event) {
      this.onFocus(event);
    }
  }, {
    key: "handleMouseMove",
    value: function handleMouseMove(event) {
      this.onFocus(event);
    }
  }, {
    key: "handleTouchEnd",
    value: function handleTouchEnd(event) {
      // Check if the view is being dragged, In this case
      // we don't want to fire the click event (because the user only wants to scroll)
      if (this.dragging) return;
      this.handleMouseDown(event);
    }
  }, {
    key: "handleTouchMove",
    value: function handleTouchMove() {
      // Set a flag that the view is being dragged
      this.dragging = true;
    }
  }, {
    key: "handleTouchStart",
    value: function handleTouchStart() {
      // Set a flag that the view is not being dragged
      this.dragging = false;
    }
  }, {
    key: "onFocus",
    value: function onFocus(event) {
      if (!this.props.isFocused) {
        this.props.onFocus(this.props.option, event);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          option = _this$props.option,
          instancePrefix = _this$props.instancePrefix,
          optionIndex = _this$props.optionIndex;
      var className = (0, _classnames.default)(this.props.className, option.className);
      return option.disabled ? _react.default.createElement("div", {
        className: className,
        onMouseDown: _blockEvent.default,
        onClick: _blockEvent.default
      }, this.props.children) : _react.default.createElement("div", {
        className: className,
        style: option.style,
        role: "option",
        "aria-label": option.label,
        onMouseDown: this.handleMouseDown,
        onMouseEnter: this.handleMouseEnter,
        onMouseMove: this.handleMouseMove,
        onTouchStart: this.handleTouchStart,
        onTouchMove: this.handleTouchMove,
        onTouchEnd: this.handleTouchEnd,
        id: "".concat(instancePrefix, "-option-").concat(optionIndex),
        title: option.title
      }, this.props.children);
    }
  }]);
  return Option;
}(_react.default.Component);

Option.propTypes = {
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  // className (based on mouse position)
  instancePrefix: _propTypes.default.string.isRequired,
  // unique prefix for the ids (used for aria)
  isDisabled: _propTypes.default.bool,
  // the option is disabled
  isFocused: _propTypes.default.bool,
  // the option is focused
  isSelected: _propTypes.default.bool,
  // the option is selected
  onFocus: _propTypes.default.func,
  // method to handle mouseEnter on option element
  onSelect: _propTypes.default.func,
  // method to handle click on option element
  onUnfocus: _propTypes.default.func,
  // method to handle mouseLeave on option element
  option: _propTypes.default.object.isRequired,
  // object that is base for that option
  optionIndex: _propTypes.default.number // index of the option, used to generate unique ids for aria

};
var _default = Option;
exports.default = _default;