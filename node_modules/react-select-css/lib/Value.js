"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var Value =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Value, _React$Component);

  function Value(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Value);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Value).call(this, props));
    _this.handleMouseDown = _this.handleMouseDown.bind((0, _assertThisInitialized2.default)(_this));
    _this.onRemove = _this.onRemove.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTouchEndRemove = _this.handleTouchEndRemove.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTouchMove = _this.handleTouchMove.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTouchStart = _this.handleTouchStart.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(Value, [{
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      if (event.type === 'mousedown' && event.button !== 0) {
        return;
      }

      if (this.props.onClick) {
        event.stopPropagation();
        this.props.onClick(this.props.value, event);
        return;
      }

      if (this.props.value.href) {
        event.stopPropagation();
      }
    }
  }, {
    key: "onRemove",
    value: function onRemove(event) {
      event.preventDefault();
      event.stopPropagation();
      this.props.onRemove(this.props.value);
    }
  }, {
    key: "handleTouchEndRemove",
    value: function handleTouchEndRemove(event) {
      // Check if the view is being dragged, In this case
      // we don't want to fire the click event (because the user only wants to scroll)
      if (this.dragging) return; // Fire the mouse events

      this.onRemove(event);
    }
  }, {
    key: "handleTouchMove",
    value: function handleTouchMove() {
      // Set a flag that the view is being dragged
      this.dragging = true;
    }
  }, {
    key: "handleTouchStart",
    value: function handleTouchStart() {
      // Set a flag that the view is not being dragged
      this.dragging = false;
    }
  }, {
    key: "renderRemoveIcon",
    value: function renderRemoveIcon() {
      if (this.props.disabled || !this.props.onRemove) return;
      return _react.default.createElement("span", {
        className: "Select-value-icon",
        "aria-hidden": "true",
        onMouseDown: this.onRemove,
        onTouchEnd: this.handleTouchEndRemove,
        onTouchStart: this.handleTouchStart,
        onTouchMove: this.handleTouchMove
      }, "\xD7");
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      var className = 'Select-value-label';
      return this.props.onClick || this.props.value.href ? _react.default.createElement("a", {
        className: className,
        href: this.props.value.href,
        target: this.props.value.target,
        onMouseDown: this.handleMouseDown,
        onTouchEnd: this.handleMouseDown
      }, this.props.children) : _react.default.createElement("span", {
        className: className,
        role: "option",
        "aria-selected": "true",
        id: this.props.id
      }, this.props.children);
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", {
        className: (0, _classnames.default)('Select-value', this.props.value.disabled ? 'Select-value-disabled' : '', this.props.value.className),
        style: this.props.value.style,
        title: this.props.value.title
      }, this.renderRemoveIcon(), this.renderLabel());
    }
  }]);
  return Value;
}(_react.default.Component);

Value.propTypes = {
  children: _propTypes.default.node,
  disabled: _propTypes.default.bool,
  // disabled prop passed to ReactSelect
  id: _propTypes.default.string,
  // Unique id for the value - used for aria
  onClick: _propTypes.default.func,
  // method to handle click on value label
  onRemove: _propTypes.default.func,
  // method to handle removal of the value
  value: _propTypes.default.object.isRequired // the option object for this value

};
var _default = Value;
exports.default = _default;